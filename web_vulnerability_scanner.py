import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import os
import sys
import json
from datetime import datetime
from scanner import Scanner
from report_generator import ReportGenerator

class VulnerabilityScanner(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Scanner de Vulnerabilidades Web - Hacker Ético")
        self.geometry("1000x700")
        self.configure(bg="#2e2e2e")
        
        # Configuração de estilo
        self.style = ttk.Style()
        self.style.theme_use('clam')
        self.style.configure('TFrame', background='#2e2e2e')
        self.style.configure('TLabel', background='#2e2e2e', foreground='white')
        self.style.configure('TButton', background='#4a4a4a', foreground='white')
        self.style.configure('TNotebook', background='#2e2e2e')
        self.style.configure('TNotebook.Tab', background='#4a4a4a', foreground='white', padding=[10, 2])
        self.style.map('TNotebook.Tab', background=[('selected', '#007acc')])
        
        # Inicialização de variáveis
        self.scanner = Scanner()
        self.report_generator = ReportGenerator()
        self.scan_in_progress = False
        self.scan_thread = None
        
        # Criação da interface
        self.create_widgets()
        
    def create_widgets(self):
        # Notebook para abas
        self.notebook = ttk.Notebook(self)
        self.notebook.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Aba de escaneamento
        self.scan_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.scan_frame, text="Escaneamento")
        
        # Aba de resultados
        self.results_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.results_frame, text="Resultados")
        
        # Aba de relatórios
        self.reports_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.reports_frame, text="Relatórios")
        
        # Aba de configurações
        self.settings_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.settings_frame, text="Configurações")
        
        # Configuração da aba de escaneamento
        self.setup_scan_tab()
        
        # Configuração da aba de resultados
        self.setup_results_tab()
        
        # Configuração da aba de relatórios
        self.setup_reports_tab()
        
        # Configuração da aba de configurações
        self.setup_settings_tab()
        
        # Barra de status
        self.status_bar = tk.Label(self, text="Pronto", bd=1, relief=tk.SUNKEN, anchor=tk.W, bg="#333333", fg="white")
        self.status_bar.pack(side=tk.BOTTOM, fill=tk.X)
    
    def setup_scan_tab(self):
        # Frame para entrada de URL
        url_frame = ttk.Frame(self.scan_frame)
        url_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(url_frame, text="URL do Alvo:").pack(side=tk.LEFT, padx=5)
        self.url_entry = ttk.Entry(url_frame, width=50)
        self.url_entry.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        self.url_entry.insert(0, "https://exemplo.com")
        
        # Frame para opções de escaneamento
        options_frame = ttk.LabelFrame(self.scan_frame, text="Opções de Escaneamento")
        options_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Checkboxes para tipos de vulnerabilidades
        self.scan_options = {}
        options = [
            ("sql_injection", "Injeção SQL"),
            ("xss", "Script Entre Sites (XSS)"),
            ("csrf", "Falsificação de Solicitação Entre Sites (CSRF)"),
            ("open_redirect", "Redirecionamento Aberto"),
            ("directory_traversal", "Travessia de Diretório"),
            ("file_inclusion", "Inclusão de Arquivo"),
            ("information_disclosure", "Divulgação de Informações"),
            ("insecure_headers", "Cabeçalhos Inseguros"),
            ("ssl_tls", "Vulnerabilidades SSL/TLS"),
            ("brute_force", "Vulnerabilidade a Força Bruta")
        ]
        
        for i, (option_id, option_text) in enumerate(options):
            var = tk.BooleanVar(value=True)
            self.scan_options[option_id] = var
            
            # Organiza em 2 colunas
            row = i // 2
            col = i % 2
            
            frame = ttk.Frame(options_frame)
            frame.grid(row=row, column=col, sticky=tk.W, padx=10, pady=5)
            
            cb = ttk.Checkbutton(frame, text=option_text, variable=var)
            cb.pack(side=tk.LEFT)
        
        # Botões de ação
        button_frame = ttk.Frame(self.scan_frame)
        button_frame.pack(fill=tk.X, padx=10, pady=10)
        
        self.scan_button = ttk.Button(button_frame, text="Iniciar Escaneamento", command=self.start_scan)
        self.scan_button.pack(side=tk.LEFT, padx=5)
        
        self.stop_button = ttk.Button(button_frame, text="Parar", command=self.stop_scan, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, padx=5)
        
        # Área de log
        log_frame = ttk.LabelFrame(self.scan_frame, text="Log de Escaneamento")
        log_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.log_area = scrolledtext.ScrolledText(log_frame, wrap=tk.WORD, bg="#1e1e1e", fg="#ffffff")
        self.log_area.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        self.log_area.config(state=tk.DISABLED)
    
    def setup_results_tab(self):
        # Frame para filtros
        filter_frame = ttk.Frame(self.results_frame)
        filter_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(filter_frame, text="Filtrar por Severidade:").pack(side=tk.LEFT, padx=5)
        self.severity_filter = ttk.Combobox(filter_frame, values=["Todas", "Crítica", "Alta", "Média", "Baixa", "Informativa"])
        self.severity_filter.pack(side=tk.LEFT, padx=5)
        self.severity_filter.current(0)
        self.severity_filter.bind("<<ComboboxSelected>>", self.filter_results)
        
        # Treeview para resultados
        results_frame = ttk.Frame(self.results_frame)
        results_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        columns = ("id", "vulnerability", "severity", "url", "details")
        self.results_tree = ttk.Treeview(results_frame, columns=columns, show="headings")
        
        # Definir cabeçalhos
        self.results_tree.heading("id", text="#")
        self.results_tree.heading("vulnerability", text="Vulnerabilidade")
        self.results_tree.heading("severity", text="Severidade")
        self.results_tree.heading("url", text="URL")
        self.results_tree.heading("details", text="Detalhes")
        
        # Definir larguras das colunas
        self.results_tree.column("id", width=50, anchor=tk.CENTER)
        self.results_tree.column("vulnerability", width=200)
        self.results_tree.column("severity", width=100, anchor=tk.CENTER)
        self.results_tree.column("url", width=250)
        self.results_tree.column("details", width=350)
        
        # Adicionar scrollbars
        vsb = ttk.Scrollbar(results_frame, orient="vertical", command=self.results_tree.yview)
        hsb = ttk.Scrollbar(results_frame, orient="horizontal", command=self.results_tree.xview)
        self.results_tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
        
        # Posicionar elementos
        self.results_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        vsb.pack(side=tk.RIGHT, fill=tk.Y)
        hsb.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Bind para exibir detalhes ao clicar
        self.results_tree.bind("<Double-1>", self.show_vulnerability_details)
    
    def setup_reports_tab(self):
        # Frame para opções de relatório
        options_frame = ttk.Frame(self.reports_frame)
        options_frame.pack(fill=tk.X, padx=10, pady=10)
        
        ttk.Label(options_frame, text="Formato:").pack(side=tk.LEFT, padx=5)
        self.report_format = ttk.Combobox(options_frame, values=["HTML", "PDF", "JSON", "CSV"])
        self.report_format.pack(side=tk.LEFT, padx=5)
        self.report_format.current(0)
        
        self.generate_button = ttk.Button(options_frame, text="Gerar Relatório", command=self.generate_report)
        self.generate_button.pack(side=tk.LEFT, padx=20)
        
        # Lista de relatórios gerados
        reports_list_frame = ttk.LabelFrame(self.reports_frame, text="Relatórios Gerados")
        reports_list_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        columns = ("date", "target", "vulnerabilities", "format", "path")
        self.reports_tree = ttk.Treeview(reports_list_frame, columns=columns, show="headings")
        
        # Definir cabeçalhos
        self.reports_tree.heading("date", text="Data")
        self.reports_tree.heading("target", text="Alvo")
        self.reports_tree.heading("vulnerabilities", text="Vulnerabilidades")
        self.reports_tree.heading("format", text="Formato")
        self.reports_tree.heading("path", text="Caminho")
        
        # Definir larguras das colunas
        self.reports_tree.column("date", width=150)
        self.reports_tree.column("target", width=200)
        self.reports_tree.column("vulnerabilities", width=100, anchor=tk.CENTER)
        self.reports_tree.column("format", width=80, anchor=tk.CENTER)
        self.reports_tree.column("path", width=300)
        
        # Adicionar scrollbars
        vsb = ttk.Scrollbar(reports_list_frame, orient="vertical", command=self.reports_tree.yview)
        hsb = ttk.Scrollbar(reports_list_frame, orient="horizontal", command=self.reports_tree.xview)
        self.reports_tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
        
        # Posicionar elementos
        self.reports_tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        vsb.pack(side=tk.RIGHT, fill=tk.Y)
        hsb.pack(side=tk.BOTTOM, fill=tk.X)
        
        # Bind para abrir relatório ao clicar
        self.reports_tree.bind("<Double-1>", self.open_report)
    
    def setup_settings_tab(self):
        # Frame para configurações gerais
        general_frame = ttk.LabelFrame(self.settings_frame, text="Configurações Gerais")
        general_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # Timeout
        timeout_frame = ttk.Frame(general_frame)
        timeout_frame.pack(fill=tk.X, padx=5, pady=5)
        ttk.Label(timeout_frame, text="Timeout (segundos):").pack(side=tk.LEFT, padx=5)
        self.timeout_var = tk.StringVar(value="30")
        timeout_entry = ttk.Entry(timeout_frame, textvariable=self.timeout_var, width=5)
        timeout_entry.pack(side=tk.LEFT, padx=5)
        
        # Threads
        threads_frame = ttk.Frame(general_frame)
        threads_frame.pack(fill=tk.X, padx=5, pady=5)
        ttk.Label(threads_frame, text="Threads:").pack(side=tk.LEFT, padx=5)
        self.threads_var = tk.StringVar(value="5")
        threads_entry = ttk.Entry(threads_frame, textvariable=self.threads_var, width=5)
        threads_entry.pack(side=tk.LEFT, padx=5)
        
        # User-Agent
        ua_frame = ttk.Frame(general_frame)
        ua_frame.pack(fill=tk.X, padx=5, pady=5)
        ttk.Label(ua_frame, text="User-Agent:").pack(side=tk.LEFT, padx=5)
        self.ua_var = tk.StringVar(value="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
        ua_entry = ttk.Entry(ua_frame, textvariable=self.ua_var, width=50)
        ua_entry.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        
        # Diretório para relatórios
        dir_frame = ttk.Frame(general_frame)
        dir_frame.pack(fill=tk.X, padx=5, pady=5)
        ttk.Label(dir_frame, text="Diretório de Relatórios:").pack(side=tk.LEFT, padx=5)
        self.reports_dir_var = tk.StringVar(value=os.path.join(os.path.dirname(os.path.abspath(__file__)), "reports"))
        dir_entry = ttk.Entry(dir_frame, textvariable=self.reports_dir_var, width=50)
        dir_entry.pack(side=tk.LEFT, padx=5, fill=tk.X, expand=True)
        browse_button = ttk.Button(dir_frame, text="...", width=3, command=self.browse_reports_dir)
        browse_button.pack(side=tk.LEFT, padx=5)
        
        # Botões de ação
        button_frame = ttk.Frame(self.settings_frame)
        button_frame.pack(fill=tk.X, padx=10, pady=10)
        
        save_button = ttk.Button(button_frame, text="Salvar Configurações", command=self.save_settings)
        save_button.pack(side=tk.LEFT, padx=5)
        
        reset_button = ttk.Button(button_frame, text="Restaurar Padrões", command=self.reset_settings)
        reset_button.pack(side=tk.LEFT, padx=5)
    
    def start_scan(self):
        print("Iniciando escaneamento...")
        url = self.url_entry.get().strip()
        if not url:
            messagebox.showerror("Erro", "Por favor, insira uma URL válida.")
            return
        
        if not url.startswith(("http://", "https://")):
            url = "http://" + url
            self.url_entry.delete(0, tk.END)
            self.url_entry.insert(0, url)
        
        # Obter opções de escaneamento selecionadas
        selected_options = {k: v.get() for k, v in self.scan_options.items()}
        if not any(selected_options.values()):
            messagebox.showerror("Erro", "Por favor, selecione pelo menos um tipo de vulnerabilidade para escanear.")
            return
        
        print(f"URL: {url}")
        print(f"Opções selecionadas: {selected_options}")
        
        # Configurar scanner
        try:
            self.scanner.set_target(url)
            print("Target configurado")
            self.scanner.set_options(selected_options)
            print("Opções configuradas")
            self.scanner.set_timeout(int(self.timeout_var.get()))
            print("Timeout configurado")
            self.scanner.set_threads(int(self.threads_var.get()))
            print("Threads configuradas")
            self.scanner.set_user_agent(self.ua_var.get())
            print("User-Agent configurado")
        except Exception as e:
            print(f"Erro ao configurar scanner: {str(e)}")
            messagebox.showerror("Erro", f"Erro ao configurar scanner: {str(e)}")
            return
        
        # Atualizar interface
        self.scan_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.scan_in_progress = True
        self.update_status("Escaneamento em andamento...")
        self.clear_log()
        self.log("Iniciando escaneamento de: " + url)
        self.log("Opções selecionadas: " + ", ".join([opt for opt, val in selected_options.items() if val]))
        
        print("Iniciando thread de escaneamento...")
        
        # Iniciar escaneamento em uma thread separada
        self.scan_thread = threading.Thread(target=self.run_scan)
        self.scan_thread.daemon = True
        self.scan_thread.start()
        print("Thread de escaneamento iniciada!")
    
    def run_scan(self):
        try:
            # Executar escaneamento
            print("Iniciando escaneamento na thread...")
            results = self.scanner.scan()
            print(f"Escaneamento concluído. Resultados: {results}")
            
            # Atualizar resultados na interface
            self.update_results(results)
            
            # Finalizar escaneamento
            self.log("Escaneamento concluído. Encontradas " + str(len(results)) + " vulnerabilidades.")
            self.update_status("Escaneamento concluído")
            
        except Exception as e:
            print(f"Erro durante o escaneamento: {str(e)}")
            self.log("Erro durante o escaneamento: " + str(e))
            self.update_status("Erro durante o escaneamento")
            import traceback
            print(traceback.format_exc())
        
        finally:
            # Restaurar interface
            self.scan_in_progress = False
            self.scan_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.DISABLED)
    
    def stop_scan(self):
        if self.scan_in_progress:
            self.scanner.stop()
            self.log("Escaneamento interrompido pelo usuário.")
            self.update_status("Escaneamento interrompido")
            self.scan_in_progress = False
            self.scan_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.DISABLED)
    
    def update_results(self, results):
        # Limpar resultados anteriores
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # Adicionar novos resultados
        for i, result in enumerate(results, 1):
            self.results_tree.insert("", "end", values=(
                i,
                result["type"],
                result["risk_level"],
                result["url"],
                result["description"]
            ))
        
        # Mudar para a aba de resultados
        self.notebook.select(1)
    
    def filter_results(self, event=None):
        severity = self.severity_filter.get()
        
        # Limpar resultados atuais
        for item in self.results_tree.get_children():
            self.results_tree.delete(item)
        
        # Obter todos os resultados
        results = self.scanner.get_results()
        
        # Filtrar e adicionar resultados
        for i, result in enumerate([r for r in results if severity == "Todas" or r["risk_level"] == severity], 1):
            self.results_tree.insert("", "end", values=(
                i,
                result["type"],
                result["risk_level"],
                result["url"],
                result["description"]
            ))
    
    def show_vulnerability_details(self, event):
        item = self.results_tree.selection()[0]
        values = self.results_tree.item(item, "values")
        
        # Criar janela de detalhes
        details_window = tk.Toplevel(self)
        details_window.title("Detalhes da Vulnerabilidade")
        details_window.geometry("600x400")
        details_window.configure(bg="#2e2e2e")
        
        # Conteúdo
        frame = ttk.Frame(details_window)
        frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Cabeçalho
        header_frame = ttk.Frame(frame)
        header_frame.pack(fill=tk.X, pady=5)
        
        ttk.Label(header_frame, text="Vulnerabilidade:", font=("Arial", 10, "bold")).grid(row=0, column=0, sticky=tk.W, padx=5)
        ttk.Label(header_frame, text=values[1]).grid(row=0, column=1, sticky=tk.W, padx=5)
        
        ttk.Label(header_frame, text="Severidade:", font=("Arial", 10, "bold")).grid(row=1, column=0, sticky=tk.W, padx=5)
        severity_label = ttk.Label(header_frame, text=values[2])
        severity_label.grid(row=1, column=1, sticky=tk.W, padx=5)
        
        ttk.Label(header_frame, text="URL:", font=("Arial", 10, "bold")).grid(row=2, column=0, sticky=tk.W, padx=5)
        ttk.Label(header_frame, text=values[3]).grid(row=2, column=1, sticky=tk.W, padx=5)
        
        # Detalhes
        details_frame = ttk.LabelFrame(frame, text="Detalhes")
        details_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        details_text = scrolledtext.ScrolledText(details_frame, wrap=tk.WORD, bg="#1e1e1e", fg="#ffffff")
        details_text.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)
        details_text.insert(tk.END, values[4])
        details_text.config(state=tk.DISABLED)
        
        # Botões
        button_frame = ttk.Frame(frame)
        button_frame.pack(fill=tk.X, pady=5)
        
        ttk.Button(button_frame, text="Fechar", command=details_window.destroy).pack(side=tk.RIGHT, padx=5)
    
    def generate_report(self):
        # Verificar se há resultados para gerar relatório
        results = self.scanner.get_results()
        if not results:
            messagebox.showerror("Erro", "Não há resultados para gerar um relatório.")
            return
        
        # Obter formato selecionado
        report_format = self.report_format.get()
        
        # Gerar relatório
        try:
            report_path = self.report_generator.generate(
                results, 
                format=report_format.lower(),
                target=self.scanner.get_target(),
                output_dir=self.reports_dir_var.get()
            )
            
            # Adicionar à lista de relatórios
            self.add_report_to_list(report_path, report_format, len(results))
            
            # Mostrar mensagem de sucesso
            messagebox.showinfo("Sucesso", f"Relatório gerado com sucesso em:\n{report_path}")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar relatório: {str(e)}")
    
    def add_report_to_list(self, path, format, vuln_count):
        # Adicionar relatório à lista
        now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        target = self.scanner.get_target()
        
        self.reports_tree.insert("", 0, values=(
            now,
            target,
            vuln_count,
            format,
            path
        ))
    
    def open_report(self, event):
        item = self.reports_tree.selection()[0]
        values = self.reports_tree.item(item, "values")
        path = values[4]
        
        # Abrir o arquivo com o aplicativo padrão
        try:
            os.startfile(path)
        except Exception as e:
            messagebox.showerror("Erro", f"Não foi possível abrir o relatório: {str(e)}")
    
    def browse_reports_dir(self):
        from tkinter import filedialog
        directory = filedialog.askdirectory(initialdir=self.reports_dir_var.get())
        if directory:
            self.reports_dir_var.set(directory)
    
    def save_settings(self):
        # Salvar configurações
        settings = {
            "timeout": self.timeout_var.get(),
            "threads": self.threads_var.get(),
            "user_agent": self.ua_var.get(),
            "reports_dir": self.reports_dir_var.get()
        }
        
        try:
            os.makedirs(os.path.dirname(os.path.abspath(__file__)), exist_ok=True)
            with open(os.path.join(os.path.dirname(os.path.abspath(__file__)), "settings.json"), "w") as f:
                json.dump(settings, f, indent=4)
            
            messagebox.showinfo("Sucesso", "Configurações salvas com sucesso.")
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao salvar configurações: {str(e)}")
    
    def reset_settings(self):
        # Restaurar configurações padrão
        self.timeout_var.set("30")
        self.threads_var.set("5")
        self.ua_var.set("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
        self.reports_dir_var.set(os.path.join(os.path.dirname(os.path.abspath(__file__)), "reports"))
    
    def log(self, message):
        # Adicionar mensagem ao log
        self.log_area.config(state=tk.NORMAL)
        timestamp = datetime.now().strftime("%H:%M:%S")
        self.log_area.insert(tk.END, f"[{timestamp}] {message}\n")
        self.log_area.see(tk.END)
        self.log_area.config(state=tk.DISABLED)
    
    def clear_log(self):
        # Limpar área de log
        self.log_area.config(state=tk.NORMAL)
        self.log_area.delete(1.0, tk.END)
        self.log_area.config(state=tk.DISABLED)
    
    def update_status(self, message):
        # Atualizar barra de status
        self.status_bar.config(text=message)

if __name__ == "__main__":
    # Criar diretórios necessários
    os.makedirs(os.path.join(os.path.dirname(os.path.abspath(__file__)), "reports"), exist_ok=True)
    
    # Iniciar aplicação
    app = VulnerabilityScanner()
    app.mainloop()